{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport ValidateForm from 'src/app/helpers/validateForm';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, auth, router, toast, userStore) {\n    this.fb = fb;\n    this.auth = auth;\n    this.router = router;\n    this.toast = toast;\n    this.userStore = userStore;\n    this.type = \"password\";\n    this.isText = false;\n    this.eyeIcon = \"fa-eye-slash\";\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  hideShowPass() {\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n  onLogin() {\n    if (this.loginForm.valid) {\n      // send the object to database\n      this.auth.login(this.loginForm.value).subscribe({\n        next: res => {\n          this.auth.storeToken(res.accessToken);\n          this.auth.storeRefreshToken(res.refreshToken);\n          const tokenPayload = this.auth.decodedToken();\n          this.userStore.setFullNameForStore(tokenPayload.unique_name);\n          this.userStore.setRoleForStore(tokenPayload.role);\n          this.toast.success({\n            detail: \"SUCCESS\",\n            summary: res.message,\n            duration: 5000\n          });\n          this.loginForm.reset();\n          this.router.navigate(['dashboard']);\n        },\n        error: err => {\n          this.toast.error({\n            detail: \"ERROR\",\n            summary: err?.error.message,\n            duration: 5000\n          });\n          this.loginForm.reset();\n        }\n      });\n    } else {\n      //throw the error using toaster and with required fields\n      ValidateForm.validateAllFormFields(this.loginForm);\n      alert(\"your form is invalid\");\n    }\n  }\n  checkValidEmail(event) {}\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","ValidateForm","LoginComponent","constructor","fb","auth","router","toast","userStore","type","isText","eyeIcon","ngOnInit","loginForm","group","username","required","password","hideShowPass","onLogin","valid","login","value","subscribe","next","res","storeToken","accessToken","storeRefreshToken","refreshToken","tokenPayload","decodedToken","setFullNameForStore","unique_name","setRoleForStore","role","success","detail","summary","message","duration","reset","navigate","error","err","validateAllFormFields","alert","checkValidEmail","event","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Desktop\\MyProduct\\Product\\PMS.UI\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgToastService } from 'ng-angular-popup';\nimport ValidateForm from 'src/app/helpers/validateForm';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserStoreService } from 'src/app/services/user-store.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  type: string = \"password\";\n  isText: boolean = false;\n  eyeIcon: string = \"fa-eye-slash\";\n  public resetPasswordEmail!: string;\n  public isValidEmail!: boolean;\n\n  loginForm!: FormGroup;\n  constructor(\n    private fb: FormBuilder, \n    private auth: AuthService, \n    private router: Router,\n    private toast: NgToastService,\n    private userStore: UserStoreService\n    ) {}\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['',Validators.required],\n      password: ['',Validators.required]\n    })\n  }\n\n  hideShowPass(){\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n\n  onLogin(){\n      if(this.loginForm.valid){\n      // send the object to database\n      this.auth.login(this.loginForm.value)\n        .subscribe({\n          next:(res) => {\n            this.auth.storeToken(res.accessToken);\n            this.auth.storeRefreshToken(res.refreshToken);\n            const tokenPayload = this.auth.decodedToken();\n            this.userStore.setFullNameForStore(tokenPayload.unique_name);\n            this.userStore.setRoleForStore(tokenPayload.role);\n            this.toast.success({detail:\"SUCCESS\", summary:res.message,duration:5000});\n            this.loginForm.reset();\n            this.router.navigate(['dashboard'])\n          },\n          error:(err) => {\n            this.toast.error({detail:\"ERROR\", summary:err?.error.message,duration:5000});\n            this.loginForm.reset();\n          }\n        });\n        \n    }\n    else{\n      //throw the error using toaster and with required fields\n      ValidateForm.validateAllFormFields(this.loginForm);\n      alert(\"your form is invalid\")\n    }\n  }\n\n  checkValidEmail(event: string){\n    \n  }\n  \n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}