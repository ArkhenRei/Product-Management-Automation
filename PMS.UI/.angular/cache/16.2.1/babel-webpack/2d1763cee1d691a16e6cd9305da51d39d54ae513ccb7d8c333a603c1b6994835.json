{"ast":null,"code":"var _class;\nimport { catchError, switchMap, throwError } from 'rxjs';\nimport { TokenApiModel } from '../models/token-api.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ng-angular-popup\";\nexport class TokenInterceptor {\n  constructor(auth, toast) {\n    this.auth = auth;\n    this.toast = toast;\n  }\n  intercept(request, next) {\n    //get request\n    const myToken = this.auth.getToken();\n    //modify\n    if (myToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${myToken}`\n        } //\"Bearer \"+myToken\n      });\n    }\n    //send back\n    return next.handle(request);\n  }\n  handleUnAuthorizedError(req, next) {\n    let tokenApiModel = new TokenApiModel();\n    tokenApiModel.accessToken = this.auth.getToken();\n    tokenApiModel.refreshToken = this.auth.getRefreshToken();\n    return this.auth.renewToken(tokenApiModel).pipe(switchMap(data => {\n      this.auth.storeRefreshToken(data.refreshToken);\n      this.auth.storeToken(data.accessToken);\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${data.accessToken}`\n        } //\"Bearer \"+myToken\n      });\n\n      return next.handle(req);\n    }), catchError(err => {\n      return throwError(() => {\n        this.toast.warning({\n          detail: \"Warning\",\n          summary: \"Token is expired, please login again\"\n        });\n        this.router;\n      });\n    }));\n  }\n}\n_class = TokenInterceptor;\n_class.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.NgToastService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["catchError","switchMap","throwError","TokenApiModel","TokenInterceptor","constructor","auth","toast","intercept","request","next","myToken","getToken","clone","setHeaders","Authorization","handle","handleUnAuthorizedError","req","tokenApiModel","accessToken","refreshToken","getRefreshToken","renewToken","pipe","data","storeRefreshToken","storeToken","err","warning","detail","summary","router","i0","ɵɵinject","i1","AuthService","i2","NgToastService","factory","ɵfac"],"sources":["D:\\Desktop\\MyProduct\\Product\\PMS.UI\\src\\app\\Interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, catchError, switchMap, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { TokenApiModel } from '../models/token-api.model';\nimport { NgToastService } from 'ng-angular-popup';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private auth: AuthService, private toast: NgToastService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    //get request\n    const myToken = this.auth.getToken();\n\n    //modify\n    if(myToken){\n      request = request.clone({\n        setHeaders: {Authorization: `Bearer ${myToken}`} //\"Bearer \"+myToken\n      })\n    }\n\n    //send back\n    return next.handle(request);\n  }\n\n  handleUnAuthorizedError(req: HttpRequest<any>, next: HttpHandler){\n    let tokenApiModel = new TokenApiModel();\n    tokenApiModel.accessToken = this.auth.getToken()!;\n    tokenApiModel.refreshToken = this.auth.getRefreshToken()!;\n    return this.auth.renewToken(tokenApiModel)\n    .pipe(\n      switchMap((data: TokenApiModel)=>{\n        this.auth.storeRefreshToken(data.refreshToken);\n        this.auth.storeToken(data.accessToken);\n        req = req.clone({\n          setHeaders: {Authorization: `Bearer ${data.accessToken}`} //\"Bearer \"+myToken\n        })\n        return next.handle(req);\n      }),\n      catchError((err)=>{\n        return throwError(()=>{\n          this.toast.warning({detail:\"Warning\", summary:\"Token is expired, please login again\"});\n          this.router\n        })\n      })\n    )\n  }\n}\n"],"mappings":";AAOA,SAAqBA,UAAU,EAAEC,SAAS,EAAEC,UAAU,QAAQ,MAAM;AAEpE,SAASC,aAAa,QAAQ,2BAA2B;;;;AAIzD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAiB,EAAUC,KAAqB;IAAhD,KAAAD,IAAI,GAAJA,IAAI;IAAuB,KAAAC,KAAK,GAALA,KAAK;EAAmB;EAEvEC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,OAAO,GAAG,IAAI,CAACL,IAAI,CAACM,QAAQ,EAAE;IAEpC;IACA,IAAGD,OAAO,EAAC;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UAACC,aAAa,EAAE,UAAUJ,OAAO;QAAE,CAAC,CAAC;OAClD,CAAC;;IAGJ;IACA,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;EAEAQ,uBAAuBA,CAACC,GAAqB,EAAER,IAAiB;IAC9D,IAAIS,aAAa,GAAG,IAAIhB,aAAa,EAAE;IACvCgB,aAAa,CAACC,WAAW,GAAG,IAAI,CAACd,IAAI,CAACM,QAAQ,EAAG;IACjDO,aAAa,CAACE,YAAY,GAAG,IAAI,CAACf,IAAI,CAACgB,eAAe,EAAG;IACzD,OAAO,IAAI,CAAChB,IAAI,CAACiB,UAAU,CAACJ,aAAa,CAAC,CACzCK,IAAI,CACHvB,SAAS,CAAEwB,IAAmB,IAAG;MAC/B,IAAI,CAACnB,IAAI,CAACoB,iBAAiB,CAACD,IAAI,CAACJ,YAAY,CAAC;MAC9C,IAAI,CAACf,IAAI,CAACqB,UAAU,CAACF,IAAI,CAACL,WAAW,CAAC;MACtCF,GAAG,GAAGA,GAAG,CAACL,KAAK,CAAC;QACdC,UAAU,EAAE;UAACC,aAAa,EAAE,UAAUU,IAAI,CAACL,WAAW;QAAE,CAAC,CAAC;OAC3D,CAAC;;MACF,OAAOV,IAAI,CAACM,MAAM,CAACE,GAAG,CAAC;IACzB,CAAC,CAAC,EACFlB,UAAU,CAAE4B,GAAG,IAAG;MAChB,OAAO1B,UAAU,CAAC,MAAI;QACpB,IAAI,CAACK,KAAK,CAACsB,OAAO,CAAC;UAACC,MAAM,EAAC,SAAS;UAAEC,OAAO,EAAC;QAAsC,CAAC,CAAC;QACtF,IAAI,CAACC,MAAM;MACb,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EACH;;SAxCW5B,gBAAgB;;mBAAhBA,MAAgB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;;SAAhBlC,MAAgB;EAAAmC,OAAA,EAAhBnC,MAAgB,CAAAoC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}