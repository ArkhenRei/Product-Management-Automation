{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport ValidateForm from 'src/app/helpers/validateForm';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, auth, router) {\n    this.fb = fb;\n    this.auth = auth;\n    this.router = router;\n    this.type = \"password\";\n    this.isText = false;\n    this.eyeIcon = \"fa-eye-slash\";\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  hideShowPass() {\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n  onLogin() {\n    if (this.loginForm.valid) {\n      // send the object to database\n      this.auth.login(this.loginForm.value).subscribe({\n        next: res => {\n          alert(res.message);\n          this.loginForm.reset();\n        },\n        error: err => {\n          alert(err?.error.message);\n          this.loginForm.reset();\n        }\n      });\n    } else {\n      //throw the error using toaster and with required fields\n      ValidateForm.validateAllFormFields(this.loginForm);\n      alert(\"your form is invalid\");\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","ValidateForm","LoginComponent","constructor","fb","auth","router","type","isText","eyeIcon","ngOnInit","loginForm","group","username","required","password","hideShowPass","onLogin","valid","login","value","subscribe","next","res","alert","message","reset","error","err","validateAllFormFields","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Desktop\\MyProduct\\Product\\PMS.UI\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport ValidateForm from 'src/app/helpers/validateForm';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  type: string = \"password\";\n  isText: boolean = false;\n  eyeIcon: string = \"fa-eye-slash\";\n  loginForm!: FormGroup;\n  constructor(private fb: FormBuilder, private auth: AuthService, private router) {}\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['',Validators.required],\n      password: ['',Validators.required]\n    })\n  }\n\n  hideShowPass(){\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n\n  onLogin(){\n      if(this.loginForm.valid){\n      // send the object to database\n      this.auth.login(this.loginForm.value)\n        .subscribe({\n          next:(res) => {\n            alert(res.message)\n            this.loginForm.reset();\n          },\n          error:(err) => {\n            alert(err?.error.message)\n            this.loginForm.reset();\n          }\n        });\n        \n    }\n    else{\n      //throw the error using toaster and with required fields\n      ValidateForm.validateAllFormFields(this.loginForm);\n      alert(\"your form is invalid\")\n    }\n  }\n  \n}\n\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAA8CC,UAAU,QAAQ,gBAAgB;AAChF,OAAOC,YAAY,MAAM,8BAA8B;AAQhD,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YAAoBC,EAAe,EAAUC,IAAiB,EAAUC,MAAM;IAA1D,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAJ9E,KAAAC,IAAI,GAAW,UAAU;IACzB,KAAAC,MAAM,GAAY,KAAK;IACvB,KAAAC,OAAO,GAAW,cAAc;EAEiD;EAEjFC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAACb,UAAU,CAACc,QAAQ,CAAC;MAClCC,QAAQ,EAAE,CAAC,EAAE,EAACf,UAAU,CAACc,QAAQ;KAClC,CAAC;EACJ;EAEAE,YAAYA,CAAA;IACV,IAAI,CAACR,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;IAC1B,IAAI,CAACA,MAAM,GAAG,IAAI,CAACC,OAAO,GAAG,QAAQ,GAAG,IAAI,CAACA,OAAO,GAAG,cAAc;IACrE,IAAI,CAACD,MAAM,GAAG,IAAI,CAACD,IAAI,GAAG,MAAM,GAAG,IAAI,CAACA,IAAI,GAAG,UAAU;EAC3D;EAEAU,OAAOA,CAAA;IACH,IAAG,IAAI,CAACN,SAAS,CAACO,KAAK,EAAC;MACxB;MACA,IAAI,CAACb,IAAI,CAACc,KAAK,CAAC,IAAI,CAACR,SAAS,CAACS,KAAK,CAAC,CAClCC,SAAS,CAAC;QACTC,IAAI,EAAEC,GAAG,IAAI;UACXC,KAAK,CAACD,GAAG,CAACE,OAAO,CAAC;UAClB,IAAI,CAACd,SAAS,CAACe,KAAK,EAAE;QACxB,CAAC;QACDC,KAAK,EAAEC,GAAG,IAAI;UACZJ,KAAK,CAACI,GAAG,EAAED,KAAK,CAACF,OAAO,CAAC;UACzB,IAAI,CAACd,SAAS,CAACe,KAAK,EAAE;QACxB;OACD,CAAC;KAEL,MACG;MACF;MACAzB,YAAY,CAAC4B,qBAAqB,CAAC,IAAI,CAAClB,SAAS,CAAC;MAClDa,KAAK,CAAC,sBAAsB,CAAC;;EAEjC;CAED;AA3CYtB,cAAc,GAAA4B,UAAA,EAL1B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW/B,cAAc,CA2C1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}