{"ast":null,"code":"var _class;\nimport { CommonModule, NgIf } from '@angular/common';\nimport { Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport ValidateForm from 'src/app/helpers/validateForm';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/reset-password.service\";\nimport * as i4 from \"ng-angular-popup\";\nfunction ResetPasswordComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*New Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Confirm Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password doesn't match\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetPasswordComponent {\n  constructor(fb, activatedRoute, resetService, toast) {\n    this.fb = fb;\n    this.activatedRoute = activatedRoute;\n    this.resetService = resetService;\n    this.toast = toast;\n    this.resetPasswordObj = new ResetPassword();\n  }\n  ngOnInit() {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, Validators.required],\n      confirmPassword: [null, Validators.required]\n    }, {\n      validator: ConfirmPasswordValidator(\"password\", \"confirmPassword\")\n    });\n    this.activatedRoute.queryParams.subscribe(val => {\n      this.emailToReset = val['email'];\n      let urlToken = val['code'];\n      this.emailToken = urlToken.replace(/ /g, '+');\n      console.log(this.emailToken);\n      console.log(this.emailToReset);\n    });\n  }\n  reset() {\n    if (this.resetPasswordForm.valid) {\n      this.resetPasswordObj.email = this.emailToReset;\n      this.resetPasswordObj.newPassword = this.resetPasswordForm.value.password;\n      this.resetPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\n      this.resetPasswordObj.emailToken = this.emailToken;\n      this.resetService.resetPassword(this.resetPasswordObj).subscribe({\n        next: res => {\n          this.toast.success({\n            detail: 'SUCCESS',\n            summary: \"Password reset \"\n          });\n        },\n        error: err => {}\n      });\n    } else {\n      ValidateForm.validateAllFormFields(this.resetPasswordForm);\n    }\n  }\n}\n_class = ResetPasswordComponent;\n_class.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ResetPasswordService), i0.ɵɵdirectiveInject(i4.NgToastService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-reset-password\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 23,\n  vars: 8,\n  consts: [[1, \"outer\"], [1, \"container\"], [1, \"row\"], [1, \"offset-md-2\", \"col-lg-5\", \"col-md-7\", \"offset-lg-4\", \"offset-md-3\"], [1, \"panel\", \"border\", \"bg-white\"], [1, \"panel-heading\"], [1, \"pt-3\", \"font-weight-bold\"], [1, \"panel-body\", \"p-3\"], [3, \"formGroup\"], [1, \"form-group\", \"pt-3\"], [1, \"input-field\"], [1, \"fa\", \"fa-user\", \"p-2\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\", \"placeholder\", \"Confirm Password\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mt-4\", \"w-100\", 3, \"click\"], [1, \"text-danger\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h3\", 6);\n      i0.ɵɵtext(7, \"Reset Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8)(10, \"div\", 9)(11, \"div\", 10);\n      i0.ɵɵelement(12, \"span\", 11)(13, \"input\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, ResetPasswordComponent_small_14_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10);\n      i0.ɵɵelement(17, \"span\", 11)(18, \"input\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, ResetPasswordComponent_small_19_Template, 2, 0, \"small\", 13);\n      i0.ɵɵtemplate(20, ResetPasswordComponent_small_20_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(21, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_button_click_21_listener() {\n        return ctx.reset();\n      });\n      i0.ɵɵtext(22, \"Reset Password\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.hasError(\"ConfirmPasswordValidator\", \"confirmPassword\"));\n    }\n  },\n  dependencies: [ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, FormsModule, NgIf, CommonModule],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["CommonModule","NgIf","Validators","ReactiveFormsModule","FormsModule","ConfirmPasswordValidator","ValidateForm","ResetPassword","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ResetPasswordComponent","constructor","fb","activatedRoute","resetService","toast","resetPasswordObj","ngOnInit","resetPasswordForm","group","password","required","confirmPassword","validator","queryParams","subscribe","val","emailToReset","urlToken","emailToken","replace","console","log","reset","valid","email","newPassword","value","resetPassword","next","res","success","detail","summary","error","err","validateAllFormFields","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","i3","ResetPasswordService","i4","NgToastService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ResetPasswordComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","ResetPasswordComponent_small_14_Template","ResetPasswordComponent_small_19_Template","ResetPasswordComponent_small_20_Template","ɵɵlistener","ResetPasswordComponent_Template_button_click_21_listener","ɵɵadvance","ɵɵproperty","ɵɵclassProp","controls","dirty","hasError","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sources":["D:\\Desktop\\MyProduct\\Product\\PMS.UI\\src\\app\\components\\reset-password\\reset-password.component.ts","D:\\Desktop\\MyProduct\\Product\\PMS.UI\\src\\app\\components\\reset-password\\reset-password.component.html"],"sourcesContent":["import { CommonModule, NgIf } from '@angular/common';\nimport { Component, NgModule, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule} from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgToastService } from 'ng-angular-popup';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport ValidateForm from 'src/app/helpers/validateForm';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport { ResetPasswordService } from 'src/app/services/reset-password.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css'],\n  standalone: true,\n  imports: [ReactiveFormsModule, FormsModule, NgIf, CommonModule]\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetPasswordForm!: FormGroup;\n  emailToReset!: string;\n  emailToken!: string;\n  resetPasswordObj = new ResetPassword();\n\n  constructor(private fb: FormBuilder, private activatedRoute: ActivatedRoute, private resetService: ResetPasswordService, private toast: NgToastService) { }\n\n  ngOnInit(): void {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, Validators.required],\n      confirmPassword: [null, Validators.required]\n    },{\n      validator: ConfirmPasswordValidator(\"password\",\"confirmPassword\")\n    });\n\n    this.activatedRoute.queryParams.subscribe(val=>{\n      this.emailToReset = val['email'];\n      let urlToken = val['code'];\n      this.emailToken = urlToken.replace(/ /g,'+');\n      console.log(this.emailToken);\n      console.log(this.emailToReset);\n    })\n  }\n\n  reset(){\n    if(this.resetPasswordForm.valid){\n      this.resetPasswordObj.email = this.emailToReset;\n      this.resetPasswordObj.newPassword = this.resetPasswordForm.value.password;\n      this.resetPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\n      this.resetPasswordObj.emailToken = this.emailToken;\n\n      this.resetService.resetPassword(this.resetPasswordObj)\n      .subscribe({\n        next:(res)=>{\n          this.toast.success({\n            detail: 'SUCCESS',\n            summary: \"Password reset \"\n          })\n        },\n        error:(err)=>{\n\n        }\n      })\n    }else{\n      ValidateForm.validateAllFormFields(this.resetPasswordForm);\n    }\n  }\n\n}\n","<div class=\"outer\">\n  <div class=\"container\">\n      <div class=\"row\">\n          <div class=\"offset-md-2 col-lg-5 col-md-7 offset-lg-4 offset-md-3\">\n              <div class=\"panel border bg-white\">\n                  <div class=\"panel-heading\">\n                      <h3 class=\"pt-3 font-weight-bold\">Reset Password</h3>\n                  </div>\n                  <div class=\"panel-body p-3\">\n                      <form [formGroup]=\"resetPasswordForm\">\n                          <div class=\"form-group pt-3\">\n                              <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\">\n                                  <span class=\"fa fa-user p-2\"></span>\n                                  <input formControlName=\"password\" type=\"password\" placeholder=\"Password\">\n                              </div>\n                          </div>\n                          <small *ngIf=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\" class=\"text-danger\">*New Password is required</small>\n                          <div class=\"form-group pt-3\">\n                              <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\">\n                                  <span class=\"fa fa-user p-2\"></span>\n                                  <input formControlName=\"confirmPassword\" type=\"password\" placeholder=\"Confirm Password\">\n                              </div>\n                          </div>\n                          <small *ngIf=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\" class=\"text-danger\">*Confirm Password is required</small>\n                          <small *ngIf=\"resetPasswordForm.hasError('ConfirmPasswordValidator','confirmPassword')\" class=\"text-danger\">*Password doesn't match</small>                  \n                          <button (click)=\"reset()\" type=\"submit\" class=\"btn btn-primary btn-block mt-4 w-100\">Reset Password</button>\n                      </form>\n                  </div>\n              </div>\n          </div>\n      </div>\n  </div>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}